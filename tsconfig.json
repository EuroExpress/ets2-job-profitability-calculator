{
	"compilerOptions": {
		"incremental": true /* Save .tsbuildinfo files to allow for incremental compilation of projects. */,
		"composite": true /* Enable constraints that allow a TypeScript project to be used with project references. */,
		"rootDir": "./src" /* Specify the root folder within your source files. */,
		"outDir": "./build" /* Specify an output folder for all emitted files. */,
		"declarationDir": "./include" /* Specify the output directory for generated declaration files. */,
		"tsBuildInfoFile": "./.tsbuildinfo" /* Specify the path to .tsbuildinfo incremental compilation file. */,
		"disableSolutionSearching": true /* Opt a project out of multi-project reference checking when editing. */,
		"disableReferencedProjectLoad": true /* Reduce the number of projects loaded automatically by TypeScript. */,
		"target": "ESNext" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
		"module": "CommonJS" /* Specify what module code is generated. */,
		"resolveJsonModule": false /* Enable importing .json files. */,
		"declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
		"removeComments": true /* Disable emitting comments. */,
		"importsNotUsedAsValues": "remove" /* Specify emit/checking behavior for imports that are only used for types. */,
		"newLine": "lf" /* Set the newline character for emitting files. */,
		"allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
		"esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
		"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
		"strict": true /* Enable all strict type-checking options. */,
		"noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
		"strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
		"strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
		"strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,
		"strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
		"noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
		"useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any'. */,
		"alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
		"noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
		"noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
		"exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
		"noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
		"noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,
		"noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
		"skipDefaultLibCheck": true /* Skip type checking .d.ts files that are included with TypeScript. */,
		"skipLibCheck": true
	},
	"include": ["./src/**/*"],
	"exclude": ["./dist/**/*"]
}
